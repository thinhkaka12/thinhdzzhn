# System Health Monitor

A comprehensive network monitoring solution that tracks system performance and sends notifications via Telegram.

## Features

- üîÑ **Automated Network Monitoring** - Continuous network status checking
- üìä **System Performance Tracking** - Monitor network health and connectivity
- üì± **Telegram Notifications** - Instant alerts for system changes
- üåê **Web Interface** - Real-time dashboard for system status
- ‚ö° **GitHub Actions Integration** - Automated deployment and monitoring
- üê≥ **Docker Support** - Easy containerized deployment

## Quick Start

### Local Development

1. **Clone the repository**
   ```bash
   git clone <your-repo-url>
   cd system-health-monitor
   ```

2. **Install dependencies**
   ```bash
   pip install -r requirements.txt
   ```

3. **Configure environment variables**
   ```bash
   export TELEGRAM_BOT_TOKEN="your_bot_token"
   export TELEGRAM_CHAT_ID="your_chat_id"
   ```

4. **Run the monitor**
   ```bash
   python main.py
   ```

### GitHub Actions Deployment

1. **Set up repository secrets**
   - Go to your repository Settings ‚Üí Secrets and Variables ‚Üí Actions
   - Add the following secrets:
     - `TELEGRAM_BOT_TOKEN`: Your Telegram bot token
     - `TELEGRAM_CHAT_ID`: Your Telegram chat ID

2. **Enable GitHub Actions**
   - The workflow will automatically run every 5 minutes
   - Manual triggers are also available in the Actions tab

### Docker Deployment

1. **Build the image**
   ```bash
   docker build -t system-health-monitor .
   ```

2. **Run the container**
   ```bash
   docker run -d \
     -e TELEGRAM_BOT_TOKEN="your_bot_token" \
     -e TELEGRAM_CHAT_ID="your_chat_id" \
     --name health-monitor \
     system-health-monitor
   ```

## Configuration

### Environment Variables

| Variable | Description | Default |
|----------|-------------|---------|
| `TELEGRAM_BOT_TOKEN` | Telegram bot token | Required |
| `TELEGRAM_CHAT_ID` | Telegram chat ID | Required |
| `CHECK_INTERVAL` | Monitoring interval in seconds | 300 |
| `RUN_MODE` | Run mode: 'continuous' or 'once' | continuous |

### Telegram Bot Setup

1. **Create a Telegram Bot**
   - Message [@BotFather](https://t.me/botfather) on Telegram
   - Use `/newbot` command
   - Follow the instructions to get your bot token

2. **Get your Chat ID**
   - Start a chat with your bot
   - Send any message
   - Visit: `https://api.telegram.org/bot<YOUR_BOT_TOKEN>/getUpdates`
   - Find your chat ID in the response

## File Structure

```
system-health-monitor/
‚îú‚îÄ‚îÄ main.py                    # Main monitoring application
‚îú‚îÄ‚îÄ index.html                 # Web interface
‚îú‚îÄ‚îÄ requirements.txt           # Python dependencies
‚îú‚îÄ‚îÄ Dockerfile                # Docker configuration
‚îú‚îÄ‚îÄ .github/
‚îÇ   ‚îî‚îÄ‚îÄ workflows/
‚îÇ       ‚îî‚îÄ‚îÄ health-monitor.yml # GitHub Actions workflow
‚îú‚îÄ‚îÄ logs/                     # System logs
‚îî‚îÄ‚îÄ README.md                 # This file
```

## Monitoring Features

### Network Status Tracking
- Real-time network address monitoring
- Connection quality assessment
- Geographic location tracking
- ISP and organization information

### Notification System
- Instant Telegram alerts for status changes
- Detailed system reports
- Error notifications
- Startup/shutdown notifications

### Web Dashboard
- Real-time status display
- Interactive network information
- Manual check capabilities
- Configuration management

## API Endpoints

The system uses the following external APIs:
- `api.ipify.org` - Primary network status
- `httpbin.org` - Backup network status
- `ip-api.com` - Geographic information
- Telegram Bot API - Notifications

## Troubleshooting

### Common Issues

1. **Telegram notifications not working**
   - Verify bot token and chat ID
   - Ensure bot is started with `/start` command
   - Check network connectivity

2. **GitHub Actions failing**
   - Verify repository secrets are set correctly
   - Check workflow permissions
   - Review action logs for detailed errors

3. **Network status not updating**
   - Check internet connectivity
   - Verify API endpoints are accessible
   - Review system logs

### Debug Mode

Enable debug logging by setting:
```bash
export DEBUG=true
python main.py
```

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test thoroughly
5. Submit a pull request

## Security

- Sensitive tokens are stored as environment variables
- API calls use HTTPS encryption
- No sensitive data is logged
- Rate limiting is implemented for API calls

## License

This project is provided as-is for educational and monitoring purposes.

## Support

For issues and questions:
1. Check the troubleshooting section
2. Review system logs
3. Test with manual configuration
4. Verify network connectivity
